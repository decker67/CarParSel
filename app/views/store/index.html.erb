
<h1>Artikel
  <small>lagern</small>
</h1>

<div id="message">Artikel sss ist im Lager X</div>

<div id="outdiv">
  <video id="video" width="300px" height="300px" autoplay></video>
</div>

<div id="result">scanning ...</div>
<%= link_to 'Abbrechen', {controller: 'mobile', action: 'overview'}, class: 'btn btn-info btn-block', role: 'button' %>

<!-- result of the camera, not visible -->
<canvas id="qr-canvas" width="800" height="600" style="display: none;"></canvas>


<script type="text/javascript">

    (function() {

        var canvas = document.getElementById("qr-canvas");
        var messageNode = document.getElementById('message');
        var context = canvas.getContext("2d");
        var pictureReady = false;
        var webkit = false;
        var videoNode = document.getElementById("video");
        var storage;
        var part;
        var lastCodeAsText;

        function initCanvas(w, h) {
            canvas.style.width = w + "px";
            canvas.style.height = h + "px";
            canvas.width = w;
            canvas.height = h;
            context.clearRect(0, 0, w, h);
        }


        function captureToCanvas() {
            if (pictureReady) {
                try {
                    context.drawImage(videoNode, 0, 0);
                    try {
                        var qrcodeResult = qrcode.decode();
                        handleResult(qrcodeResult);
                        setTimeout(captureToCanvas, 500);
                    }
                    catch (e) {
                        console.log(e);
                        setTimeout(captureToCanvas, 500);
                    }
                }
                catch (e) {
                    console.log(e);
                    setTimeout(captureToCanvas, 500);
                }
            }
        }

        function handleResult(codeAsText) {
            //S#nnn or P#nnn
            if(lastCodeAsText === codeAsText) {
                return;
            }
            lastCodeAsText = codeAsText
            var type = codeAsText[0];
            var id = codeAsText.substr(2);
            if(type === 'S') {
                storage = id;
                part = undefined;
                playSound();
            } else if(type === 'P') {
                part = id;
                playSound();
            }

            if(storage && part) {
              storePart(storage, part);
              playSound();
            }
        }

        function playSound() {
            //var audio = new Audio('audio_file.mp3');
            //audio.play();
        }

        function storePart(storage, part) {
            var requestForStore = '/store_part';
            var data = { storage: storage, part: part };
            $.post(requestForStore, data).done(function (result) {
                messageNode.innerHTML =
                        result.car_part + ' wird gelagert in ' +  result.storage;
            });
        }

        function read(result) {
            document.getElementById("result").innerHTML = result;
        }


        function success(stream) {
            videoNode.src = webkit ? window.webkitURL.createObjectURL(stream) : stream;
            pictureReady = true;
            setTimeout(captureToCanvas, 500);
        }

        function error(error) {
            pictureReady = false;
        }

        function load() {
            initCanvas(800, 600);
            qrcode.callback = read;
            initialise();
        }

        function initialise() {

            MediaStreamTrack.getSources(function(sourceInfos) {
                var videoSource = null;

                for (var i = 0; i != sourceInfos.length; ++i) {
                    var sourceInfo = sourceInfos[i];
                    if (sourceInfo.kind === 'video') {
                        videoSource = sourceInfo.id;
                    }
                }

                var constraints = {
                    audio: false,
                    video: {
                        optional: [ { sourceId: videoSource } ]
                    }
                };
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
                navigator.getUserMedia(constraints, success, error);
                webkit = !!navigator.webkitGetUserMedia;
                setTimeout(captureToCanvas, 500);
            });

        }

        load();

    }());

</script>





