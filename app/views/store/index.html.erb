<div id="scanner-page">
    <h1>Artikel
      <small>lagern</small>
      <%= link_to 'Abbrechen', {controller: 'mobile', action: 'overview'}, class: 'cancel-button btn btn-info', role: 'button', id: 'stopp-button' %>
    </h1>

    <div id="store-info">
      Lagerort: <span id="store-name">-</span>
    </div>

    <div id="article-id">
      Artikelnummer: <span id="article-name">-</span>
    </div>

    <div id="message">-</div>
    <audio id="scan-sound" src="/assets/scan.mp3" type="audio/mpeg"></audio>
    <audio id="scan-end-sound" src="/assets/scanEnd.mp3" type="audio/mpeg"></audio>

    <div class="form-group" id="partId-group">
      <label for="partId">Artikelnummer</label>
      <input type="number" class="form-control" id="partId" placeholder="id">
    </div>

    <% if Rails.env.development? %>
        <%= button_tag 'Storage Scanned', type: 'button', onclick: 'storageScannedClickHandler()', class: 'btn', role: 'button' %>
        <%= button_tag 'Article Scanned', type: 'button', onclick: 'articleScannedClickHandler()', class: 'btn', role: 'button' %>
    <% else %>
        <!-- scanner image -->
        <div id="interactive" class="viewport"></div>
    <% end %>

    <div>
      <%= button_tag 'Undo', type: 'button', onclick: 'undoClickHandler()', class: 'btn btn-danger', role: 'button' %>
    </div>

    <div id="log"></div>
</div>

<script type="text/javascript">

    var nodeInteractive = $('#interactive');
    var partIdGroupNode = $('#partId-group');
    var nodePartIdInput = $('#partId');

    (function (parent) {
        var touchstartX = 0;
        var touchendX = 0;
        var element = document.getElementById('scanner-page');

        partIdGroupNode.hide();

        element.addEventListener('touchstart', function(event) {
            touchstartX = event.changedTouches[0].pageX;
        });
        element.addEventListener('touchend', function(event) {
            touchendX = event.changedTouches[0].pageX;
            handle();
        });

        function handle() {
            var swiped = 'swiped: ';
            if (touchendX - touchstartX > 100) {
                togglePartIdInput();
            }
        }

        function togglePartIdInput() {
            if (parent.nodeInteractive.is(":visible")) {
                parent.nodeInteractive.hide();
                parent.partIdGroupNode.show();
            } else {
                parent.nodeInteractive.show();
                parent.partIdGroupNode.hide();
            }
        }
    })(this);


    window.onerror = function (msg, url, lineNo, columnNo, error) {
        var string = msg.toLowerCase();
        var substring = "script error";
        if (string.indexOf(substring) > -1){
            alert('Script Error: See Browser Console for Detail');
        } else {
            var message = [
                'Message: ' + msg,
                'URL: ' + url,
                'Line: ' + lineNo,
                'Column: ' + columnNo,
                'Error object: ' + JSON.stringify(error)
            ].join(' - ');
            log(message);
            alert(message);
        }
        return false;
    };

    var development = "<%= Rails.env.development? %>";

    var audioNode = document.getElementById("scan-sound");
    var audioScanEndNode = document.getElementById('scan-end-sound');
    var storeNameNode = document.getElementById('store-name');
    var articleId = document.getElementById('article-name');
    var messageNode = document.getElementById('message');

    var storageId;
    var partId;
    var previousStorageId;
    var previousPartId;

    var configuration = {
        inputStream: {
            type: "LiveStream",
            constraints: {
                width: 640,
                height: 100,
                facing: "environment" // or user
            }
        },
        locator: {
            patchSize: "medium",
            halfSample: true
        },
        numOfWorkers: 4,
        decoder: {
            readers: ["code_128_reader"]
        },
        locate: true
    };

    if (development == 'false') {
        init();
    }

    function init() {
        Quagga.init(configuration, function (error) {
            var previousCode;
            if (error) {
                log(error.name + ' ' + error.message);
            } else {
                Quagga.start();
                var stoppButtonNode = document.getElementById('stopp-button');
                stoppButtonNode.onclick = function () {
                    Quagga.stop();
                };
                Quagga.onDetected(function (result) {
                    var code = result.codeResult.code;
                    if (code != previousCode) {
                        previousCode = code;
                        //log(code);
                        handleResult(code);
                    }
                });
            }
        });
    }

    function log(value) {
        var errorNode = document.getElementById('log');
        var textNode = document.createTextNode(value);
        errorNode.appendChild(textNode);
    }

    function handleError(error) {
        log('Error:' + error);
    }

    function handleStoreDone(result) {
        messageNode.innerHTML = result.carPartName + ' wird gelagert in ' + result.storageName;
        previousPartId = partId;
        previousStorageId = result.previousStorageId;
        if (!result.errorOccured) {
            playScanEnd();
        }
    }

    function handleResult(codeAsText) {
        //S#nnn or P#nnn
        var type = codeAsText[0];
        var id = codeAsText.substr(2);
        if (type === 'S') {
            storageId = id;
            partId = undefined;
            getStorageName(storageId);
            playScanned();
        } else if (type === 'P') {
            partId = id;
            articleId.textContent = partId;
            playScanned();
        }

        if (storageId && partId) {
            storePart(storageId, partId, handleStoreDone);
        }
    }

    function playScanned() {
        audioNode.play();
    }

    function playScanEnd() {
        audioScanEndNode.play();
    }

    function getStorageName(id) {
        var requestForGetStorage = '/get_storage';
        var data = {id: id};
        $.get(requestForGetStorage, data).
                done(function (result) {
                    storeNameNode.textContent = result.storageName;
                })
                .fail(handleError);
    }

    function storePart(storageId, partId, callback) {
        var requestForStorePart = '/store_part';
        var data = {storageId: storageId, partId: partId};
        $.post(requestForStorePart, data)
                .done(callback)
                .fail(handleError);
    }

    function undoClickHandler() {
        if (previousStorageId !== undefined && previousPartId !== undefined) {
            storePart(previousStorageId, previousPartId, handleStoreDone);
        }
    }

    function storageScannedClickHandler() {
        handleResult('S#1');
    }

    function articleScannedClickHandler() {
        handleResult('P#1');
    }

    nodePartIdInput.keydown(function (e) {
        if (e.keyCode == 9 || e.keyCode == 13) {
            var carPartId = nodePartIdInput.val();
            handleResult('P#' + carPartId);
        }
    });

</script>





